#! perl

use v5.20;
use common::sense;

use Linux::FD qw(signalfd);
use POSIX;
use File::Basename qw(dirname);

my $sigset = POSIX::SigSet->new(&POSIX::SIGUSR1);
sigprocmask(SIG_BLOCK, $sigset);
my $sigfd = signalfd($sigset);
my $libdir = dirname(__FILE__);

my $term;

sub reload_all {
    my @lines = `urxvt --perl-lib $libdir -pe config-print 2>&1`;
    my %resource;
    for (@lines) {
        $resource{$1} = $2 if (/(.*?): (.*)/);
    }
    my $cmd = "";
    for (keys %resource) {
        my $key;
        given ($_) {
            # Codes adapted from https://github.com/sos4nt/dynamic-colors/blob/master/bin/dynamic-colors
            $key = "4;$1" when (/color(\d+)/);
            $key = 10 when "foreground";
            $key = 11 when "background";
            $key = 12 when "cursorColor";
            $key = 13 when "pointerColor2";
            $key = 14 when "pointerColor";
            $key = 17 when "highlight";
            $key = 708 when "borderColor";
            $key = 710 when "font";
            when ("geometry") {
                if (my ($col, $row) = $resource{$_} =~ /(\d+)x(\d+)/) {
                    $cmd .= "\e[8;${row};${col}t";
                }
                next;
            }
            default { next }
        }
        my $val = $resource{$_};
        $cmd .= "\e]$key;$val\a";
    }
    # warn "CMD: " . ($cmd =~ s/\e/\\e/gr =~ s/\a/\\a/gr);
    $term->cmd_parse($cmd);
}

our $watch = urxvt::anyevent->io (
                fh   => $sigfd, # which file handle to check
                poll => "r",     # which event to wait for ("r"ead data)
                cb   => sub {    # what callback to execute
                    sysread $sigfd, my $dummy, 4096;
                    reload_all;
                }
            );

sub on_start {
    $term = $TERM;
    ()
}

sub on_destroy {
    undef $watch;
    ()
}
